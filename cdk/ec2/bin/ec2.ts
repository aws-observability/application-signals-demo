#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import { NetworkStack } from '../lib/network-stack';
import { IAMStack } from '../lib/iam-stack';
import { DatabaseStack } from '../lib/database-stack';
import { ComputeStack } from '../lib/compute-stack';
import { LoadBalancerStack } from '../lib/load-balancer-stack';

const app = new cdk.App();

const networkStack = new NetworkStack(app, 'AppSignalsEC2NetworkStack');
// Pass the VPC and RDS security group to the DatabaseStack
const databaseStack = new DatabaseStack(app, 'AppSignalsEC2DatabaseStack', {
  vpc: networkStack.vpc,
  rdsSecurityGroup: networkStack.rdsSecurityGroup,
});
const iamStack = new IAMStack(app, 'AppSignalsEC2IAMStack');
// IAM stack is strangely depend on the database stack because of the secrets generated by secret manager
iamStack.addDependency(databaseStack);

const computeStack = new ComputeStack(app, 'AppSignalsEC2ComputeStack', {
  vpc: networkStack.vpc,
  ec2SecurityGroup: networkStack.ec2SecurityGroup,
  ec2InstanceRole: iamStack.ec2InstanceRole,
  hostedZone: networkStack.hostedZone,
  dbSecretArn: databaseStack.dbSecret.secretArn,
});

// Create the LoadBalancerStack
const loadBalancerStack = new LoadBalancerStack(app, 'AppSignalsEC2LoadBalancerStack', {
  vpc: networkStack.vpc,
  albSecurityGroup: networkStack.albSecurityGroup,
  frontendInstance: computeStack.frontendInstance,
});