#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import { NetworkStack } from '../lib/network-stack';
import { IAMStack } from '../lib/iam-stack';
import { DatabaseStack } from '../lib/database-stack';
import { ComputeStack } from '../lib/compute-stack';
import { LoadBalancerStack } from '../lib/load-balancer-stack';
// import { NoopWaitStack } from '../lib/noop-wait-stack';

const app = new cdk.App();
// new Ec2Stack(app, 'Ec2Stack', {
//   /* If you don't specify 'env', this stack will be environment-agnostic.
//    * Account/Region-dependent features and context lookups will not work,
//    * but a single synthesized template can be deployed anywhere. */

//   /* Uncomment the next line to specialize this stack for the AWS Account
//    * and Region that are implied by the current CLI configuration. */
//   // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },

//   /* Uncomment the next line if you know exactly what Account and Region you
//    * want to deploy the stack to. */
//   // env: { account: '123456789012', region: 'us-east-1' },

//   /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
// });

const networkStack = new NetworkStack(app, 'AppSignalsEC2NetworkStack');
// Pass the VPC and RDS security group to the DatabaseStack
const databaseStack = new DatabaseStack(app, 'AppSignalsEC2DatabaseStack', {
  vpc: networkStack.vpc,
  rdsSecurityGroup: networkStack.rdsSecurityGroup,
});
const iamStack = new IAMStack(app, 'AppSignalsEC2IAMStack');
// IAM stack is strangely depend on the database stack because of the secrets generated by secret manager
iamStack.addDependency(databaseStack);

const computeStack = new ComputeStack(app, 'AppSignalsEC2ComputeStack', {
  vpc: networkStack.vpc,
  ec2SecurityGroup: networkStack.ec2SecurityGroup,
  ec2InstanceRole: iamStack.ec2InstanceRole,
  hostedZone: networkStack.hostedZone,
  dbSecretArn: databaseStack.dbSecret.secretArn,
});

// const noopWaitStack = new NoopWaitStack(app, 'NoopWaitStack', {});
// noopWaitStack.addDependency(computeStack);
// Create the LoadBalancerStack
const loadBalancerStack = new LoadBalancerStack(app, 'AppSignalsEC2LoadBalancerStack', {
  vpc: networkStack.vpc,
  albSecurityGroup: networkStack.albSecurityGroup,
  frontendInstance: computeStack.frontendInstance,
});